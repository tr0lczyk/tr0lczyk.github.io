/* selektor uniwersalny gniazda * */


* {
    padding: 0;
    margin: 0;
}


/*  elementom blokowym któe nie mają kontentu należy nadac wysokosc (automatycznie, jako ze sa to elementy blokowe, otrzymają 100% szerokości elementu nadrzednego) */

/* selektor identyfikatora */

#uniwersalny {
    /* height: 50px; */
    background: gray;
} 

/* Element selector */

ul {
    list-style: none; /* pozbywa się kropek przy list elementach */
}

li {
    color: red;
}

/* selektor klasy  */

.list-item {
    color: pink;
}

/* selektor potomka, lapie wszystkie elementy bez różnicy na jakim poziomie zagnieżdzenia - budujemy za pomocą spacji */

#potomkowie p {
    font-size: 28px;
    color: bisque;
}

/* selektor bezposredniego potomka, znak > lapie elementy ktore sa zagniezdzone bezposrednio pod elementem poprzedzajacym */

#potomkowie > p {
    color: red;
}

/* selektor rodzeństwa, znak + lapie element bezposrednio na tym samym poziomie zagniezdzenia co element poprzedzajacy*/

#potomkowie p + span p{
    color: green;
}


/* pseudoelementy before, after LL Nie ma elementu before after bez contentu tylko czysty tekst Before i after należą do kontentu jezeli je zdefiniujemy.  wprzykłądzie z menu list, załączliśmy znaCZNIKI, MYSLNIKI DO PPOSZCZEGÓLNYCH WIERSZY*/

#potomkowie p + span p::before {
    content: 'L';
}

#potomkowie p + span p::after {
    content: '=';
}

#uniwersalny #main-list .list-item::before {
    content:'=';
    margin: 5px;
}

#uniwersalny #main-list-2 .list-item::before {
    content:'=';
    margin: 5px;
}

/* pseudoelement first-letter */

#potomkowie p + span p::first-letter {
    color:red;
}

/* pseudoelement first-line */
#potomkowie p + span p::first-line {
    color: black;
}

/* PSEUDOKLASY linków */

/* stan nieodwiedzony */

#linki a:link {
    color:red;
}

/* stan odwiedzony */

#linki a:visited {
    color: blue;
}

/* pseudoklasa hover */

#linki a:hover {
    color: #a31919;
    text-decoration: none;
}

/* pseudoklasa active */
/* przy przytrzymaniu LPM na elemencie */
#linki a:active {
    color: pink;
    text-decoration: none;
}



/* pseudoklasa focus */
/*  */
#focus input {
    margin-top: 30px;
}


#focus input:focus {
    border: 3px solid red;
    background-color: blue;
    color: #fff;
    
}

/* pseudoklasa target - kotwica - można dopasować do kazdego elementu na kotwicy */
/* lapie cel kotwicy(linku wewnetrznego - odnoszącego się do elementu na stronie) */
:target {
    border: 5px solid black;
}

/* pseudoelement lang */

div:lang(pl) {
    background-color: lightyellow;
}

/* pseudoelement first-child,last-child Moze się zdarzyc ze safar nie bedzie pokazywało fisrt child , wtedy nalezy zgrupowć selektory po przecinku z pseudoklasą fist child i first-oftype*/

#main-list .list-item:first-child,
#main-list .list-item:first-of-type
{
    color: blue;
}

#main-list .list-item:last-child,
#main-list .list-item:last-of-type {
    color: blue;
}

/* pseudoklasa only-child, dla kazdego elementu kltóry jest jedynym dzieckiem swojego rodzica */

#only-child span:only-child {
    font-size:36px;
    text-transform: uppercase;
}

/* pseudoklasa empty - służy do targetowania elementu bez contentu */

div:empty {
    width: 300px;
/*    height: 300px;*/
    background-color: red;
}

/* nth-child, nth-last-child */

#uniwersalny #main-list-2 .list-item:nth-child(3) {
    background-color: yellow;
}

#uniwersalny #main-list-2 .list-item:nth-child(even) {
    background-color: red;
}

#kontener {
    background-color: azure;
}

#kontener .floated {
    width: 33%;
    display: inline-block;
    margin-right: 0.5%;
    background-color: green;
    float: left;
}

#kontener .floated:nth-child(3n +3) {
    margin-right: 0;
}

/* SELEKTORY ATRYBUTÓW */

/*  Po nazwie atrybutu */

#selektory-atrybutow input[type] {
    width: 99%;
    margin-bottom: 10px;
}

/*  konkretna wartość atrybutu [att = wartosc]   */

#selektory-atrybutow input[type="tel"] {
    background-color: aqua;
}


/* atrybuit zawiera w sobie - sprawdza czy konkretna wartość występuje w atrybucie */

#selektory-atrybutow input[title~="input"] {
    background-color: red;
    
}

/* atrybuit zawiera w sobie - sprawdza czy konkretna wartość występuje w atrybucie przynejmniej raz w jakiejkoliek formie*/

#selektory-atrybutow input[title*="trzeci"] {
    background-color: green;
    
}

/* atrybuit zaczyna się konkretnym ciągiem znaków*/

#selektory-atrybutow input[title^="input"] {
    background-color: green;
    
}

/* atrybuit kończy się się konkretnym ciągiem znaków - przydatne przy różnorakim stylowaniu linków odmiennego rodzaju*/

#selektory-atrybutow input[title$="input"] {
    background-color: yellow;
    
}

#srodkowanie-elementu {
    height: 100px;
    background-color: green;
    text-align: center;
}

/*#srodkowanie-elementu div{
    width: 500px;
    margin: 10px;/* wszystkie m */
    margin: 10px 10px;/* góra dół */
    margin: 10px 10px 10px; /* lewo góra prawo */
    margin: 10px 10px 10px 10px; /* lewo górwa prawo dół */*/ 


#srodkowanie-elementu div{
    width: 500px;
    margin: 10px auto;
    background-color: beige;
}

/* float */
#floatowanie img {
    float: left;
    width: 200px;
}
/* Clear wyłącza opływanie, musi znajdować się po elementach opływalnych . sprawia ze kolejna sekcja po floatowalnej nie opływa*/
.clear {
    clear: both;    
}

/* Transition  - pozwala na uzyskanie efektów animacjii na pseudoklasy (np. hover) Zawsze ustawiamy przed elementem który chcemy animować*/

#tranzycje {
    width: 300px;
    height: 300px;
    background-color: red;
    /* jakie włąsciwiości mają być animowane wskazujemy */
/*    transition-property: width, background-color;*/
    /* czas trwania animacji */
/*    transition-duration: 0.5s;*/
    /* okreslamy opoznienie animacji */
/*    transition-delay: 0s;*/
    /* tempo efektu przejścia */
/*    transition-timing-function: ease-in-out;*/
    display:inline-block;
    transition: all 0.4s;
}

#tranzycje-2 {
    display:inline-block;
    width: 300px;
    height: 300px;
    background-color: aqua;
}
#tranzycje:hover {
    background-color: blue;
    width:  600px;
}